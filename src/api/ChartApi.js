/**
 * Image-Charts
 * Charts, simple as a URL. A safe and fast replacement for Google Image Charts
 *
 * OpenAPI spec version: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ImageCharts) {
      root.ImageCharts = {};
    }
    root.ImageCharts.ChartApi = factory(root.ImageCharts.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Chart service.
   * @module api/ChartApi
   * @version 1.5.0
   */

  /**
   * Constructs a new ChartApi. 
   * @alias module:api/ChartApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getChart operation.
     * @callback module:api/ChartApi~getChartCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Image-Charts API
     * Image-charts
     * @param {module:model/String} cht chart type
     * @param {String} chd chart data
     * @param {String} chs chart size
     * @param {Object} opts Optional parameters
     * @param {String} opts.chds text format custom scaling
     * @param {String} opts.chxr axis range
     * @param {String} opts.chxp axis label positions
     * @param {String} opts.chof output fake format (default to .png)
     * @param {String} opts.chdl text for each series, to display in the legend (default to )
     * @param {String} opts.chdls chart legend text and style (default to 000000)
     * @param {String} opts.chg grid lines
     * @param {String} opts.chco series colors (default to F56991,FF9F80,FFC48C,D1F2A5,EFFAB4)
     * @param {String} opts.chtt chart title (default to )
     * @param {String} opts.chts chart title colors and font size (default to )
     * @param {String} opts.chxt axis to apply labels to
     * @param {String} opts.chxl custom axis labels (default to )
     * @param {String} opts.chxs color, size, alignment, and formatting of axis labels
     * @param {String} opts.chm line fills (default to )
     * @param {String} opts.chls line thickness and solid/dashed style (default to )
     * @param {String} opts.chl pie chart labels (default to )
     * @param {String} opts.chma chart margins
     * @param {String} opts.chdlp (upcoming) (default to b)
     * @param {String} opts.chf Background Fills (default to bg,s,FFFFFF)
     * @param {String} opts.chbh Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don&#39;t specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width. (default to 10)
     * @param {String} opts.chan gif configuration
     * @param {String} opts.chli doughnut chart inside label
     * @param {String} opts.icac image-charts enterprise &#x60;account_id&#x60;
     * @param {String} opts.ichm HMAC-SHA256 signature
     * @param {Boolean} opts.icwt Force watermark display even if the chart was signed with an enterprise account (default to false)
     * @param {module:api/ChartApi~getChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getChart = function(cht, chd, chs, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cht' is set
      if (cht === undefined || cht === null) {
        throw new Error("Missing the required parameter 'cht' when calling getChart");
      }

      // verify the required parameter 'chd' is set
      if (chd === undefined || chd === null) {
        throw new Error("Missing the required parameter 'chd' when calling getChart");
      }

      // verify the required parameter 'chs' is set
      if (chs === undefined || chs === null) {
        throw new Error("Missing the required parameter 'chs' when calling getChart");
      }


      var pathParams = {
      };
      var queryParams = {
        'cht': cht,
        'chd': chd,
        'chds': opts['chds'],
        'chxr': opts['chxr'],
        'chxp': opts['chxp'],
        'chof': opts['chof'],
        'chs': chs,
        'chdl': opts['chdl'],
        'chdls': opts['chdls'],
        'chg': opts['chg'],
        'chco': opts['chco'],
        'chtt': opts['chtt'],
        'chts': opts['chts'],
        'chxt': opts['chxt'],
        'chxl': opts['chxl'],
        'chxs': opts['chxs'],
        'chm': opts['chm'],
        'chls': opts['chls'],
        'chl': opts['chl'],
        'chma': opts['chma'],
        'chdlp': opts['chdlp'],
        'chf': opts['chf'],
        'chbh': opts['chbh'],
        'chan': opts['chan'],
        'chli': opts['chli'],
        'icac': opts['icac'],
        'ichm': opts['ichm'],
        'icwt': opts['icwt']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/png', 'application/gif'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
